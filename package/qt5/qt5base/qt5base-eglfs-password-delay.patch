--- old/src/plugins/platforms/eglfs/qeglfsintegration.cpp	2014-12-21 10:33:37.084268835 +0100
+++ new/src/plugins/platforms/eglfs/qeglfsintegration.cpp	2014-12-21 10:39:44.638944287 +0100
@@ -51,6 +51,8 @@
 #include <QtGui/QOffscreenSurface>
 #include <qpa/qplatformcursor.h>
 
+#include <qpa/qplatformtheme.h>
+
 #include <EGL/egl.h>
 
 static void initResources()
@@ -60,6 +62,17 @@
 
 QT_BEGIN_NAMESPACE
 
+
+class QPlatformThemeOlinuxino: public QPlatformTheme {
+	QVariant themeHint(ThemeHint hint) const {
+		if (hint == QPlatformTheme::PasswordMaskDelay) {
+			return QVariant(int(2000));
+		}
+		return QPlatformTheme::themeHint(hint);
+	}
+};
+
+
 QEglFSIntegration::QEglFSIntegration()
 {
     mDisableInputHandlers = qgetenv("QT_QPA_EGLFS_DISABLE_INPUT").toInt();
@@ -72,6 +85,20 @@
     QEglFSHooks::hooks()->platformDestroy();
 }
 
+QPlatformTheme *QEglFSIntegration::createPlatformTheme(const QString &name) const
+{
+	Q_UNUSED(name);
+	QPlatformTheme *theme = new QPlatformThemeOlinuxino;
+	return theme;
+}
+
+QStringList QEglFSIntegration::themeNames() const
+{
+	QStringList themeNames;
+	themeNames << "default";
+	return themeNames;
+}
+
 bool QEglFSIntegration::hasCapability(QPlatformIntegration::Capability cap) const
 {
     // We assume that devices will have more and not less capabilities
@@ -136,6 +163,8 @@
     {
     case QPlatformIntegration::ShowIsFullScreen:
         return screen()->compositingWindow() == 0;
+    case QPlatformIntegration::PasswordMaskDelay:
+        return 2000;
     default:
         return QPlatformIntegration::styleHint(hint);
     }
--- old/src/plugins/platforms/eglfs/qeglfsintegration.h	2014-12-21 10:33:37.084268835 +0100
+++ new/src/plugins/platforms/eglfs/qeglfsintegration.h	2014-12-21 10:39:44.638944287 +0100
@@ -46,6 +46,9 @@
     QEglFSIntegration();
     ~QEglFSIntegration();
 
+    QPlatformTheme *createPlatformTheme(const QString &name) const;
+    QStringList themeNames() const;
+
     void initialize() Q_DECL_OVERRIDE;
 
     bool hasCapability(QPlatformIntegration::Capability cap) const Q_DECL_OVERRIDE;
